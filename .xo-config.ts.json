{
  "$schema": "https://json.schemastore.org/eslintrc.json",
  "rules": {
    "@typescript-eslint/ban-types": [
      "error",
      {
        "extendDefaults": false,
        "types": {
          "String": {
            "message": "Use `string` instead.",
            "fixWith": "string"
          },
          "Number": {
            "message": "Use `number` instead.",
            "fixWith": "number"
          },
          "Boolean": {
            "message": "Use `boolean` instead.",
            "fixWith": "boolean"
          },
          "Symbol": {
            "message": "Use `symbol` instead.",
            "fixWith": "symbol"
          },
          "Object": {
            "message": "The `Object` type is mostly the same as `unknown`. You probably want `Record<string, unknown>` instead. See https://github.com/typescript-eslint/typescript-eslint/pull/848",
            "fixWith": "Record<string, unknown>"
          },
          "{}": {
            "message": "The `{}` type is mostly the same as `unknown`. You probably want `Record<string, unknown>` instead.",
            "fixWith": "Record<string, unknown>"
          },
          "object": {
            "message": "The `object` type is hard to use. Use `Record<string, unknown>` instead. See: https://github.com/typescript-eslint/typescript-eslint/pull/848",
            "fixWith": "Record<string, unknown>"
          },
          "Function": "Use a specific function type instead, like `() => void`."
        }
      }
    ],
    "@typescript-eslint/object-curly-spacing": [
      "error",
      "always"
    ],
    "@typescript-eslint/space-before-function-paren": [
      "error",
      "always"
    ],
    "object-curly-spacing": [
      "off"
    ],
    "space-before-function-paren": [
      "off"
    ]
  }
}
